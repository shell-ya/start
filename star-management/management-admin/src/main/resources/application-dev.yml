spring:
  shardingsphere:
    datasource:
      hikari:
         minimum-idle: 5
      ## 空闲连接存活最大时间，默认600000（10分钟）
         idle-timeout: 180000
      #数据库分库名
      names: ds0
      ds0:
        #type为数据源，如果是Druid数据库连接池，可以去改
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        jdbc-url: jdbc:mysql://sh-cynosdbmysql-grp-ibkpxd68.sql.tencentcdb.com:23543/star_dev?serverTimezone=GMT%2B8&characterEncoding=utf8
        username: root
        password: wqd1234.
        connection-test-query: SELECT 1
          # 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 默认:30秒
          # 生产环境 connect-time 10 s
        connection-timeout: 9000
          # 一个连接idle状态的最大时长（毫秒），超时则被释放（retired），默认:10分钟
        idle-timeout: 600000
          # 一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），默认:30分钟 1800000ms，建议设置比数据库超时时长少60秒，参考MySQL wait_timeout 7200s 参数（# 一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），默认:30分钟 1800000ms，建议设置比数据库超时时长少60秒，参考MySQL wait_timeout参数（show variables like '%timeout%';）
        max-lifetime: 1800000
          # 连接池中允许的最大连接数。缺省值：10；推荐的公式：((core_count * 2) + effective_spindle_count)
        maximum-pool-size: 30
          # 最小连接数
        minimum-idle: 5


    #        ds1:
    #          type: com.alibaba.druid.pool.DruidDataSource
    #          driver-class-name: com.mysql.cj.jdbc.Driver
    #          jdbc-url: jdbc:mysql://sh-cynosdbmysql-grp-ibkpxd68.sql.tencentcdb.com:23543/star?serverTimezone=GMT%2B8&characterEncoding=utf8
    #          username: root
    #          password: wqd1234.
    # 分片规则

    sharding:
      tables:
        # 设置逻辑表为 star_nft_order
        #          star_nft_order:
        #            actual-data-nodes: ds0.star_nft_order_$->{0..9} # 真实数据节点
        ##            # 指定 t_order 表里面主键 order_id 生成策略 为 SNOWFLAKE（雪花算法）
        ##            key-generator:
        ##              column: order_id
        ##              type: SNOWFLAKE
        #            # 指定数据库分片策略，根据 order_id 进行分库，是偶数则添加到 ds0，是奇数则添加到 ds1
        ##            database-strategy:
        ##              inline:
        ##                sharding-column: user_id
        ##                algorithm-expression: ds$->{order_id % 2}
        #            # 指定数据表分片策略，根据 order_user_id 进行分表，是偶数则添加到 t_order_0，是奇数则添加到 t_order_1
        #            table-strategy:
        #              inline:
        #                sharding-column: user_id
        #                algorithm-expression: star_nft_order_$->{user_id%10}
        account_user:
          actual-data-nodes: ds0.account_user_$->{0..9}
          #            key-generator:
          #              column: order_item_id
          #              type: SNOWFLAKE
          #            database-strategy:
          #              inline:
          #                sharding-column: id
          #                algorithm-expression: ds$->{id % 2}
          table-strategy:
            inline:
              sharding-column: account
              algorithm-expression: account_user_$->{account%10}
      # 设置绑定关系
      binding-tables: account_user
      # 默认数据源，即未配置分表规则的表数据存储表
    #        default-data-source: ds0
    # 在日志中SQL语句
    props:
      sql:
        show: true
web3j:
  client-address: https://matic-mumbai.chainstacklabs.com
  #client-address: HTTP://127.0.0.1:7545
